generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CLIENT
  BUSINESS
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  image          String?
  emailVerified  DateTime?
  phoneNumber    String?
  password       String?
  role           Role      @default(CLIENT)

  businessProfile BusinessProfile?
  clientProfile   ClientProfile?
  
  businesses     Business[]
  bookings       Booking[]
  accounts       Account[]
  sessions       Session[]
  createdAt      DateTime  @default(now())
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Business {
  id          String    @id @default(cuid())
  ownerId     String
  owner       User      @relation(fields: [ownerId], references: [id])
  name        String
  description String?
  phoneNumber String
  address     String?
  city        String?
  country     String?
  postalCode  String?
  website     String?
  category    String?
  workingHours Json?
  services    Service[]
  employees   Employee[]
  createdAt   DateTime  @default(now())

  @@index([ownerId])
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  icon        String?
  isActive    Boolean   @default(true)
  
  services    Service[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model BusinessProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  companyName       String?
  businessLicense   String?
  taxId             String?
  yearsInBusiness   Int?
  
  emergencyContact  String?
  alternatePhone    String?
  
  acceptsWalkIns    Boolean  @default(false)
  appointmentRequired Boolean @default(true)
  maxBookingsPerDay Int?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model ClientProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  dateOfBirth       DateTime?
  gender            String?
  emergencyContact  String?
  
  preferredContact  String?
  notificationPreferences Json?
  
  totalBookings     Int      @default(0)
  loyaltyPoints     Int      @default(0)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Service {
  id              String    @id @default(cuid())
  businessId      String
  business        Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  categoryId      String?
  category        Category? @relation(fields: [categoryId], references: [id])
  name            String
  description     String?
  price           Float
  durationMinutes Int
  bookings        Booking[]
  employeeServices EmployeeService[]
  createdAt       DateTime  @default(now())

  @@index([businessId])
  @@index([categoryId])
}

model Employee {
  id          String    @id @default(cuid())
  businessId  String
  business    Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  name        String
  email       String?   @unique
  phoneNumber String?
  position    String?
  isActive    Boolean   @default(true)
  avatar      String?
  password    String?

  employeeServices EmployeeService[]
  timeSlots       TimeSlot[]
  bookings        Booking[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([businessId])
}

model EmployeeService {
  id          String    @id @default(cuid())
  employeeId  String
  employee    Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  serviceId   String
  service     Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  
  price       Float?
  durationMinutes Int?
  isAvailable Boolean   @default(true)
  
  timeSlots   TimeSlot[]
  
  createdAt   DateTime  @default(now())
  
  @@unique([employeeId, serviceId])
  @@index([employeeId])
  @@index([serviceId])
}

model TimeSlot {
  id                  String    @id @default(cuid())
  employeeServiceId   String
  employeeService     EmployeeService @relation(fields: [employeeServiceId], references: [id], onDelete: Cascade)
  employeeId          String
  employee            Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  
  startTime           DateTime
  endTime             DateTime
  isAvailable         Boolean   @default(true)
  isRecurring         Boolean   @default(false)
  
  bookings            Booking[]
  
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@unique([employeeServiceId, startTime, endTime])
  @@index([employeeId])
}

model Booking {
  id        String        @id @default(cuid())
  clientId  String
  client    User          @relation(fields: [clientId], references: [id], onDelete: Cascade)
  serviceId String
  service   Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  employeeId String
  employee  Employee      @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  timeSlotId String?
  timeSlot  TimeSlot?     @relation(fields: [timeSlotId], references: [id], onDelete: Cascade)
  start     DateTime
  end       DateTime
  status    BookingStatus @default(PENDING)
  createdAt DateTime      @default(now())

  @@index([clientId])
  @@index([employeeId])
  @@index([serviceId])
}

model Author{
  id String @id @default(cuid())
  name String
  surname String
  email String @unique
  books Book[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Book {
  name String
  id String @id @default(cuid())
  authorId String
  author Author @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

